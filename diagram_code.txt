@startuml
class Interface { 
Класс интерфейса программы
==
    
    
    - experiment : Experiment 

    + run() : void - метод с запуска которого начинается работа программы

    + init_interface_vars() : void 
    + init_sliders() : void
    + init_numeric_entries() : void
    + init_button() : void
    + init_top_labels() : void
    + init_gui() : void
    
    + reset_interface_vars() : void

    Обработчики кнопок
    + exit_button_click() : void
    + reset_button_click() : void 
    + iteration_button_click() : void
    + to_the_end_button_click() : void

}


class Experiment { 
Главный управляющий класс программы 
== 
    - curmonth: Int
    - cur_networth: Int 
    - cur_profit: Int 
    - cur_loss: Int 

    - tax_percent: Int
    - tax_value: Int 

    - auto_sold: Int
    - estate_sold: Int
    - med_sold: Int

    - ins_company: InsuranceComp

    + iteration_button_click() : bool - главный метод класса
    + simulate_month(): bool
    
    + to_the_end() : void
    + reset() : void

    + update_auto_config(price:int,time:int,demand:int) : void
    + update_med_config(price:int,time:int,demand:int) : void 
    + update_estate_config(price:int,time:int,demand:int) : void

}

class InsuranceComp{
Класс страховой компании
==
    - base_demand : Int

    Флаги позволяющие отслеживать изменения условий страховых программ
    - auto_config_updated : bool
    - estate_config_updated : bool
    - med_config_updated : bool

    Id актуальных страховых программ каждого типа
    - self.cur_autoprog_id : Int 
    - self.cur_estateprog_id : Int 
    - self.cur_medprog_id : Int 
    - self.last_program_id : Int

    Условия страховых программ
    - auto_price: Int
    - auto_time: Int
    - auto_refund: Int 

    - estate_price: Int
    - estate_time: Int
    - estate_refund : Int

    - med_price: Int
    - med_time: Int
    - med_refund : Int

    - ins_progs_active: List[Int] - id действующих страховых программ (по которым еще есть неистекшие договора)
    - ins_progs: Map[Int][InsuranceAgreement] - пары(id страхового договора, страх договор)

    + init_state() : void
    + update_client_state() : void 
    + update_dates() : void 
    + create_ins_agr(ins_type: str,prog_id : int) : InsuranceAgreement
    + add_ins_agr(prog_id: int,ins_agr: InsuranceAgreement)

    + reset()

    + gen_demand() : Map[str][Tuple[int,int]]
    + calc_demand(additional_demand:int) : int

    + gen_ins_cases() : Map[Str][List[int]]
    
}


class InsuranceAgreement{
Класс страхового договора
==
    - program_id: Int
    - program_type: Str
    - program_price: Int
    - program_time: Int 
    - program_refund: Int

    - days_prob: List[Int]
    - client_list: List[Int]
    - insurance_cases: List[Int] - просчитанные страховые случаи (по месяцам)


    - has_clients: bool
    - client_list: List[Int]
    
    + add_clients(client_arr:List[Int]) : void
    + update_dates() : int - количество клиентов расторгнувших договор

    + calc_insurance_cases(client_num:int, insurance_prob : float) : int
    + update_insurance_cases() : void
    + gen_insurance_cases() : Tuple[int,int]
}

Interface "1" --> "1" Experiment
Experiment "1" --> "1" InsuranceComp
InsuranceComp "1" --> "many" InsuranceAgreement
@enduml